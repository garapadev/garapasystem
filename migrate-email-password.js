const { PrismaClient } = require('@prisma/client');
const crypto = require('crypto');

const prisma = new PrismaClient();

// Fun√ß√£o de criptografia (mesma l√≥gica do arquivo TypeScript)
function encryptPassword(password) {
  try {
    const SECRET_KEY = process.env.EMAIL_ENCRYPTION_KEY || process.env.NEXTAUTH_SECRET || 'default-secret-key-change-in-production';
    
    // Gerar IV aleat√≥rio
    const iv = crypto.randomBytes(16);
    
    // Criar chave de 32 bytes a partir do secret
    const key = crypto.scryptSync(SECRET_KEY, 'salt', 32);
    
    // Criar cipher
    const cipher = crypto.createCipher('aes-256-cbc', key);
    
    // Criptografar
    let encrypted = cipher.update(password, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    
    // Retornar IV + dados criptografados em base64
    const result = iv.toString('hex') + ':' + encrypted;
    return Buffer.from(result).toString('base64');
    
  } catch (error) {
    console.error('Erro ao criptografar senha:', error);
    throw new Error('Falha na criptografia da senha');
  }
}

async function migrateEmailPassword() {
  try {
    console.log('Iniciando migra√ß√£o da senha de email...');
    
    // Buscar todas as configura√ß√µes de email
    const emailConfigs = await prisma.emailConfig.findMany();
    
    if (emailConfigs.length === 0) {
      console.log('Nenhuma configura√ß√£o de email encontrada');
      return;
    }
    
    for (const config of emailConfigs) {
      console.log(`\nProcessando configura√ß√£o: ${config.email}`);
      
      // Verificar se a senha est√° em formato bcrypt
      if (config.password.startsWith('$2')) {
        console.log('Senha est√° em formato bcrypt, migrando...');
        
        // A senha original que foi usada (substitua pela senha real)
        const originalPassword = 'Aadmin@sup09'; // IMPORTANTE: Use a senha real aqui
        
        // Criptografar com o novo m√©todo
        const encryptedPassword = encryptPassword(originalPassword);
        
        // Atualizar no banco
        await prisma.emailConfig.update({
          where: { id: config.id },
          data: { password: encryptedPassword }
        });
        
        console.log('‚úÖ Senha migrada com sucesso!');
      } else {
        console.log('Senha j√° est√° no formato correto ou n√£o √© bcrypt');
      }
    }
    
    console.log('\nüéâ Migra√ß√£o conclu√≠da!');
    console.log('\n‚ö†Ô∏è  IMPORTANTE: Certifique-se de que a senha original est√° correta no script.');
    
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

migrateEmailPassword();