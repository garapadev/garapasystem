# Configuração do Nginx para Load Balancing - GarapaSystem Telemetry
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuração de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Configurações de performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Configuração de gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=telemetry:10m rate=100r/s;

    # Upstream para coletor OpenTelemetry (múltiplas instâncias)
    upstream otel_collector_grpc {
        least_conn;
        server otel-collector:4317 max_fails=3 fail_timeout=30s;
        # Adicionar mais instâncias conforme necessário
        # server otel-collector-2:4317 max_fails=3 fail_timeout=30s;
        # server otel-collector-3:4317 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream otel_collector_http {
        least_conn;
        server otel-collector:4318 max_fails=3 fail_timeout=30s;
        # Adicionar mais instâncias conforme necessário
        # server otel-collector-2:4318 max_fails=3 fail_timeout=30s;
        # server otel-collector-3:4318 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream prometheus {
        server prometheus:9090;
    }

    upstream grafana {
        server grafana:3000;
    }

    upstream jaeger {
        server jaeger:16686;
    }

    upstream kibana {
        server kibana:5601;
    }

    # Configuração SSL/TLS
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Servidor principal - HTTPS
    server {
        listen 443 ssl http2;
        server_name telemetry.garapasystem.com;

        ssl_certificate /etc/ssl/certs/garapasystem.crt;
        ssl_certificate_key /etc/ssl/private/garapasystem.key;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Autenticação mútua TLS para instâncias
        ssl_client_certificate /etc/ssl/certs/ca.crt;
        ssl_verify_client optional;

        # OTLP gRPC endpoint
        location /v1/traces {
            limit_req zone=telemetry burst=20 nodelay;
            
            # Verificar certificado cliente para instâncias
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }

            grpc_pass grpc://otel_collector_grpc;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;
        }

        location /v1/metrics {
            limit_req zone=telemetry burst=20 nodelay;
            
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }

            grpc_pass grpc://otel_collector_grpc;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;
        }

        location /v1/logs {
            limit_req zone=telemetry burst=20 nodelay;
            
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }

            grpc_pass grpc://otel_collector_grpc;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;
        }

        # OTLP HTTP endpoint
        location /otlp/ {
            limit_req zone=telemetry burst=20 nodelay;
            
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }

            proxy_pass http://otel_collector_http/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
        }

        # Prometheus (acesso restrito)
        location /prometheus/ {
            limit_req zone=api burst=10 nodelay;
            auth_basic "Prometheus Access";
            auth_basic_user_file /etc/nginx/htpasswd;

            proxy_pass http://prometheus/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Grafana
        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Jaeger UI
        location /jaeger/ {
            auth_basic "Jaeger Access";
            auth_basic_user_file /etc/nginx/htpasswd;

            proxy_pass http://jaeger/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Kibana
        location /kibana/ {
            auth_basic "Kibana Access";
            auth_basic_user_file /etc/nginx/htpasswd;

            proxy_pass http://kibana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Status page
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;
            deny all;
        }
    }

    # Redirecionamento HTTP para HTTPS
    server {
        listen 80;
        server_name telemetry.garapasystem.com;
        return 301 https://$server_name$request_uri;
    }

    # Servidor para métricas internas (sem SSL)
    server {
        listen 8080;
        server_name localhost;

        location /metrics {
            access_log off;
            allow 172.20.0.0/16;
            deny all;
            
            proxy_pass http://prometheus/metrics;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}