#!/usr/bin/env node

/**
 * Script de Valida√ß√£o - M√≥dulo de Laudos T√©cnicos
 * 
 * Este script verifica a consist√™ncia entre os dados do banco de dados
 * e a interface do usu√°rio para o m√≥dulo de Laudos T√©cnicos.
 */

const { Pool } = require('pg');
const { chromium } = require('playwright');

// Configura√ß√£o do banco de dados
const pool = new Pool({
  host: 'localhost',
  port: 5434,
  user: 'postgres',
  password: 'postgres',
  database: 'crm_erp'
});

async function validarLaudosTecnicos() {
  console.log('üîç Iniciando valida√ß√£o do m√≥dulo de Laudos T√©cnicos (atrav√©s das Ordens de Servi√ßo)...\n');
  
  const resultados = {
    sucessos: [],
    avisos: [],
    erros: []
  };

  let browser;

  try {
    // 1. Verificar dados no banco de dados
    console.log('üìä Verificando dados no banco de dados...');
    
    // Verificar laudos t√©cnicos
    const laudosQuery = `
      SELECT 
        lt.*,
        os.numero as ordem_numero,
        c.nome as cliente_nome,
        col.nome as tecnico_nome
      FROM laudos_tecnicos lt
      LEFT JOIN ordens_servico os ON lt."ordemServicoId" = os.id
      LEFT JOIN clientes c ON os."clienteId" = c.id
      LEFT JOIN colaboradores col ON lt."tecnicoId" = col.id
      ORDER BY lt."createdAt" DESC
      LIMIT 10
    `;
    
    const laudosResult = await pool.query(laudosQuery);
    const laudosDB = laudosResult.rows;

    console.log(`‚úÖ Encontrados ${laudosDB.length} laudos t√©cnicos (atrav√©s das ordens de servi√ßo) no banco de dados`);
    resultados.sucessos.push(`Banco de dados: ${laudosDB.length} laudos t√©cnicos encontrados`);

    if (laudosDB.length === 0) {
      resultados.avisos.push('Nenhum laudo t√©cnico encontrado no banco de dados');
      return resultados;
    }

    // 2. Verificar interface do usu√°rio (atrav√©s das ordens de servi√ßo)
    console.log('\nüåê Verificando interface do usu√°rio...');
    
    browser = await chromium.launch({ headless: true });
    const context = await browser.newContext();
    const page = await context.newPage();

    // Fazer login
    await page.goto('http://localhost:3000/login');
    await page.fill('input[type="email"]', 'admin@garapasystem.com');
    await page.fill('input[type="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(2000);

    // Navegar para p√°gina de ordens de servi√ßo (onde os laudos s√£o acessados)
    await page.goto('http://localhost:3000/ordens-servico');
    await page.waitForTimeout(3000);

    // Verificar t√≠tulo da p√°gina (buscar pelo t√≠tulo espec√≠fico da p√°gina, n√£o do header)
    const titulo = await page.locator('main h1, .space-y-6 h1, [class*="space-y"] h1').textContent().catch(() => null);
    if (titulo && (titulo.toLowerCase().includes('ordem') || titulo.toLowerCase().includes('servi√ßo'))) {
      resultados.sucessos.push(`Interface: P√°gina de ordens de servi√ßo (onde laudos s√£o acessados) encontrada (t√≠tulo: "${titulo}")`);
    } else {
      resultados.erros.push(`Interface: P√°gina de ordens de servi√ßo n√£o encontrada ou t√≠tulo incorreto (encontrado: "${titulo}")`);
    }

    // Verificar se existem elementos de lista/tabela de ordens
    const elementos = await page.locator('table tr, .list-item, .card, [data-testid*="ordem"]').count();
    if (elementos > 0) {
      resultados.sucessos.push(`Interface: ${elementos} elementos de lista/tabela de ordens encontrados`);
      
      // Tentar acessar uma ordem para verificar se h√° se√ß√£o de laudo t√©cnico
      try {
        const primeiraOrdem = page.locator('table tr, .list-item, .card').first();
        await primeiraOrdem.click();
        await page.waitForTimeout(2000);
        
        // Verificar se h√° se√ß√£o de laudo t√©cnico na ordem
        const secaoLaudo = await page.locator('text="Laudo T√©cnico", text="Diagn√≥stico", [data-testid="laudo-section"]').count();
        if (secaoLaudo > 0) {
          resultados.sucessos.push('Interface: Se√ß√£o de laudo t√©cnico encontrada na ordem de servi√ßo');
        } else {
          resultados.avisos.push('Interface: Se√ß√£o de laudo t√©cnico n√£o encontrada na ordem de servi√ßo');
        }
      } catch (error) {
        resultados.avisos.push('Interface: N√£o foi poss√≠vel acessar detalhes da ordem de servi√ßo');
      }
    } else {
      resultados.erros.push('Interface: Nenhum elemento de lista/tabela de ordens encontrado');
    }

    // Verificar se os laudos do banco aparecem na interface (atrav√©s dos n√∫meros das ordens)
    for (const laudo of laudosDB.slice(0, 3)) { // Verificar apenas os 3 primeiros
      const laudoNaInterface = await page.locator(`text="${laudo.numero}"`).count() > 0;
      if (laudoNaInterface) {
        resultados.sucessos.push(`Interface: Ordem ${laudo.numero} (com laudo) encontrada na interface`);
      } else {
        resultados.avisos.push(`Interface: Ordem ${laudo.numero} (com laudo) n√£o encontrada na interface`);
      }
    }

    // Verificar bot√£o de criar nova ordem
    const botaoCriar = await page.locator('button:has-text("Novo"), button:has-text("Criar"), button:has-text("Adicionar"), a:has-text("Novo")').count();
    if (botaoCriar > 0) {
      resultados.sucessos.push('Interface: Bot√£o para criar nova ordem de servi√ßo encontrado');
    } else {
      resultados.avisos.push('Interface: Bot√£o para criar nova ordem de servi√ßo n√£o encontrado');
    }

    await browser.close();

    // 3. Verificar integridade dos dados
    console.log('\nüîç Verificando integridade dos dados...');
    
    for (const laudo of laudosDB) {
      // Verificar campos obrigat√≥rios do laudo t√©cnico
      if (laudo.diagnostico && laudo.diagnostico.trim() !== '') {
        resultados.sucessos.push(`Laudo ${laudo.ordem_numero}: Possui diagn√≥stico preenchido`);
      } else {
        resultados.erros.push(`Laudo ${laudo.ordem_numero}: Campo 'diagnostico' est√° vazio`);
      }
      
      if (laudo.solucaoRecomendada && laudo.solucaoRecomendada.trim() !== '') {
        resultados.sucessos.push(`Laudo ${laudo.ordem_numero}: Possui solu√ß√£o recomendada preenchida`);
      } else {
        resultados.erros.push(`Laudo ${laudo.ordem_numero}: Campo 'solucaoRecomendada' est√° vazio`);
      }
      
      if (laudo.problemaRelatado && laudo.problemaRelatado.trim() !== '') {
        resultados.sucessos.push(`Laudo ${laudo.ordem_numero}: Possui problema relatado preenchido`);
      } else {
        resultados.erros.push(`Laudo ${laudo.ordem_numero}: Campo 'problemaRelatado' est√° vazio`);
      }
      
      if (!laudo.status || laudo.status.trim() === '') {
        resultados.erros.push(`Laudo ${laudo.ordem_numero}: Campo 'status' est√° vazio`);
      }
      
      // Verificar relacionamentos
      if (!laudo.ordem_numero) {
        resultados.erros.push(`Laudo ${laudo.id}: N√£o est√° associado a uma ordem de servi√ßo`);
      }
      
      if (!laudo.tecnico_nome) {
        resultados.avisos.push(`Laudo ${laudo.ordem_numero}: N√£o tem t√©cnico respons√°vel definido`);
      }
      
      if (!laudo.cliente_nome) {
        resultados.avisos.push(`Laudo ${laudo.ordem_numero}: Ordem de servi√ßo n√£o est√° associada a um cliente`);
      }
      
      // Verificar valores monet√°rios se aplic√°vel
      if (laudo.valorOrcamento && (isNaN(laudo.valorOrcamento) || laudo.valorOrcamento < 0)) {
        resultados.erros.push(`Laudo ${laudo.ordem_numero}: Valor do or√ßamento inv√°lido`);
      }
      
      // Verificar status de aprova√ß√£o
      if (laudo.aprovadoCliente && !laudo.dataAprovacao) {
        resultados.avisos.push(`Laudo ${laudo.ordem_numero}: Aprovado pelo cliente mas sem data de aprova√ß√£o`);
      }
      
      // Verificar consist√™ncia entre gerarOrcamento e valorOrcamento
      if (laudo.gerarOrcamento && !laudo.valorOrcamento) {
        resultados.avisos.push(`Laudo ${laudo.ordem_numero}: Marcado para gerar or√ßamento mas sem valor definido`);
      }
    }
    
    if (laudosDB.length > 0) {
      resultados.sucessos.push(`Integridade: Verifica√ß√£o de ${laudosDB.length} ordem(ns) com laudo t√©cnico conclu√≠da`);
      console.log(`‚úÖ Verifica√ß√£o de integridade de ${laudosDB.length} ordem(ns) com laudo conclu√≠da`);
    }

    if (resultados.erros.length === 0) {
      resultados.sucessos.push('Dados: Integridade dos dados verificada com sucesso');
    }

  } catch (error) {
    resultados.erros.push(`Erro geral: ${error.message}`);
  } finally {
    if (browser) {
      await browser.close();
    }
    await pool.end();
  }

  return resultados;
}

// Fun√ß√£o para gerar relat√≥rio
function gerarRelatorio(resultados) {
  console.log('\nüìã RELAT√ìRIO DE VALIDA√á√ÉO - LAUDOS T√âCNICOS');
  console.log('==================================================');

  if (resultados.sucessos.length > 0) {
    console.log(`\n‚úÖ SUCESSOS (${resultados.sucessos.length}):`);
    resultados.sucessos.forEach(sucesso => console.log(`  ‚Ä¢ ${sucesso}`));
  }

  if (resultados.avisos.length > 0) {
    console.log(`\n‚ö†Ô∏è  AVISOS (${resultados.avisos.length}):`);
    resultados.avisos.forEach(aviso => console.log(`  ‚Ä¢ ${aviso}`));
  }

  if (resultados.erros.length > 0) {
    console.log(`\n‚ùå ERROS (${resultados.erros.length}):`);
    resultados.erros.forEach(erro => console.log(`  ‚Ä¢ ${erro}`));
  }

  console.log('\n==================================================');
  
  const status = resultados.erros.length === 0 ? '‚úÖ APROVADO' : '‚ùå REPROVADO';
  console.log(`${status} STATUS FINAL: ${status.includes('‚úÖ') ? 'APROVADO' : 'REPROVADO'}`);

  if (resultados.erros.length > 0 || resultados.avisos.length > 0) {
    console.log('\nüîß A√ß√µes recomendadas:');
    if (resultados.erros.length > 0) {
      console.log(`  ‚Ä¢ Corrigir os ${resultados.erros.length} erros identificados`);
    }
    if (resultados.avisos.length > 0) {
      console.log(`  ‚Ä¢ Revisar os ${resultados.avisos.length} avisos`);
    }
    console.log('  ‚Ä¢ Verificar a sincroniza√ß√£o entre banco de dados e interface');
    console.log('  ‚Ä¢ Testar funcionalidades de CRUD');
    console.log('  ‚Ä¢ Validar fluxo de aprova√ß√£o de laudos');
  }
}

// Executar valida√ß√£o
async function main() {
  console.log('üîç Iniciando valida√ß√£o do m√≥dulo de Laudos T√©cnicos...');
  
  const resultados = await validarLaudosTecnicos();
  gerarRelatorio(resultados);
  
  process.exit(resultados.erros.length > 0 ? 1 : 0);
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { validarLaudosTecnicos };