#!/bin/sh
# auto-init-database.sh
# Script de inicializa√ß√£o autom√°tica do banco de dados
# Verifica se existe usu√°rio admin, executa init.sql, migra√ß√µes e seed conforme necess√°rio

set -e

echo "üöÄ GarapaSystem - Inicializa√ß√£o Autom√°tica do Banco de Dados"
echo "============================================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar vari√°veis de ambiente essenciais
if [ -z "$DATABASE_URL" ]; then
    log_error "DATABASE_URL n√£o est√° definida"
    exit 1
fi

log_info "Verificando conectividade com o banco de dados..."

# Aguardar o banco estar dispon√≠vel (timeout de 60 segundos)
max_attempts=30
attempt=0

while [ $attempt -lt $max_attempts ]; do
    if timeout 5 sh -c "echo 'SELECT 1;' | npx prisma db execute --url=\"$DATABASE_URL\" --stdin" >/dev/null 2>&1; then
        log_success "Conex√£o com banco estabelecida!"
        break
    fi
    
    attempt=$((attempt + 1))
    log_info "Tentativa $attempt/$max_attempts - Aguardando banco de dados..."
    sleep 2
done

if [ $attempt -eq $max_attempts ]; then
    log_error "N√£o foi poss√≠vel conectar ao banco ap√≥s $max_attempts tentativas"
    exit 1
fi

# Verificar se o banco precisa de inicializa√ß√£o
log_info "Verificando se o banco precisa de inicializa√ß√£o..."

# Usar o script existente para verificar se o banco est√° vazio
if node /app/scripts/check-database-empty.js >/dev/null 2>&1; then
    log_warning "Banco de dados vazio detectado - Executando inicializa√ß√£o completa"
    
    # 1. Executar init.sql se existir
    if [ -f "/app/prisma/init.sql" ]; then
        log_info "Executando script de inicializa√ß√£o (init.sql)..."
        echo "\\i /app/prisma/init.sql" | npx prisma db execute --url="$DATABASE_URL" --stdin || {
            log_warning "Falha ao executar init.sql - continuando..."
        }
        log_success "Script init.sql executado"
    else
        log_warning "Arquivo init.sql n√£o encontrado - pulando"
    fi
    
    # 2. Executar migra√ß√µes do Prisma
    log_info "Executando migra√ß√µes do Prisma..."
    npx prisma migrate deploy || {
        log_error "Falha ao executar migra√ß√µes"
        exit 1
    }
    log_success "Migra√ß√µes executadas com sucesso"
    
    # 3. Executar seed
    log_info "Executando seed do banco de dados..."
    npm run db:seed || {
        log_error "Falha ao executar seed"
        exit 1
    }
    log_success "Seed executado com sucesso"
    
    # 4. Executar seed dos m√≥dulos
    log_info "Executando seed dos m√≥dulos..."
    npx tsx /app/scripts/seed-modulos.ts || {
        log_warning "Falha ao executar seed dos m√≥dulos - continuando..."
    }
    log_success "Seed dos m√≥dulos executado com sucesso"
    
    log_success "‚úÖ Inicializa√ß√£o completa do banco conclu√≠da!"
    log_info "Usu√°rio administrador padr√£o:"
    log_info "  Email: admin@garapasystem.com"
    log_info "  Senha: password"
    log_warning "‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!"
    
else
    log_info "Banco de dados j√° cont√©m dados - verificando necessidade de atualiza√ß√µes..."
    
    # Verificar se existe usu√°rio admin
    log_info "Verificando exist√™ncia de usu√°rio administrador..."
    if /app/scripts/check-admin-user.sh >/dev/null 2>&1; then
        log_success "Usu√°rio administrador encontrado"
    else
        log_warning "Usu√°rio administrador n√£o encontrado - executando seed para criar admin..."
        npm run db:seed || {
            log_warning "Falha ao executar seed - admin pode n√£o ter sido criado"
        }
    fi
    
    # Verificar e executar seed dos m√≥dulos se necess√°rio
    log_info "Verificando m√≥dulos do sistema..."
    npx tsx /app/scripts/seed-modulos.ts || {
        log_warning "Falha ao verificar/criar m√≥dulos - continuando..."
    }
    log_success "M√≥dulos verificados/criados"
    
    # Executar migra√ß√µes pendentes
    log_info "Verificando migra√ß√µes pendentes..."
    npx prisma migrate deploy || {
        log_warning "Falha ao executar migra√ß√µes pendentes"
    }
    log_success "Migra√ß√µes verificadas/aplicadas"
fi

# Gerar cliente Prisma (sempre executar para garantir sincroniza√ß√£o)
log_info "Gerando cliente Prisma..."
npx prisma generate || {
    log_warning "Falha ao gerar cliente Prisma"
}
log_success "Cliente Prisma gerado"

# Validar migra√ß√£o espec√≠fica e garantir seed p√≥s-upgrade
log_info "Validando migra√ß√£o v0.3.38.23 e estado das permiss√µes..."

# Verificar contagem de permiss√µes e garantir seed idempotente
PERM_COUNT=$(node -e "const { PrismaClient } = require('@prisma/client'); const prisma = new PrismaClient(); prisma.permissao.count().then(c => { console.log(c); return prisma.$disconnect(); }).catch(() => { console.log('0'); prisma.$disconnect(); });" 2>/dev/null || echo "0")
if [ "$PERM_COUNT" -lt 80 ]; then
    log_warning "Permiss√µes abaixo do esperado ($PERM_COUNT) - executando seed..."
    npm run db:seed || {
        log_warning "Falha ao executar seed de permiss√µes"
    }
fi

# Garantir permiss√µes/m√≥dulos essenciais (compras, estoque, tombamento) e v√≠nculo ao perfil Administrador
if [ -f "/app/scripts/ensure-core-permissions-and-modules.js" ]; then
    log_info "Garantindo permiss√µes e m√≥dulos essenciais (compras, estoque, tombamento)..."
    node /app/scripts/ensure-core-permissions-and-modules.js || {
        log_warning "Falha ao garantir permiss√µes/m√≥dulos essenciais"
    }
fi

# Rodar valida√ß√£o detalhada se script existir
if [ -f "/app/scripts/validate-migration-0.3.38.23.js" ]; then
    node /app/scripts/validate-migration-0.3.38.23.js || {
        log_warning "Valida√ß√£o falhou - reaplicando migra√ß√µes e seed e tentando novamente..."
        npx prisma migrate deploy || log_warning "Falha ao reaplicar migra√ß√µes"
        npm run db:seed || log_warning "Falha ao executar seed"
        # Refor√ßar v√≠nculo de permiss√µes essenciais ao perfil Administrador
        if [ -f "/app/scripts/ensure-core-permissions-and-modules.js" ]; then
            node /app/scripts/ensure-core-permissions-and-modules.js || log_warning "Falha ao refor√ßar permiss√µes/m√≥dulos essenciais"
        fi
        node /app/scripts/validate-migration-0.3.38.23.js || log_warning "Valida√ß√£o da migra√ß√£o ainda falhou"
    }
fi

echo ""
log_success "üéâ Inicializa√ß√£o autom√°tica do banco conclu√≠da com sucesso!"
echo "============================================================"