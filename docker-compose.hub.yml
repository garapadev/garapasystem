version: '3.8'

services:
  gaparasystem-postgres:
    image: garapadev/postgres-postgis-pgvector:15-optimized
    container_name: gaparasystem-postgres
    environment:
      POSTGRES_DB: garapasys_db
      POSTGRES_USER: garapasys_user
      POSTGRES_PASSWORD: garapasys_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init-complete.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - gaparasystem-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U garapasys_user -d garapasys_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  gaparasystem-app:
    image: garapadev/garapasystem-app:0.1.31
    container_name: gaparasystem-app
    environment:
      DB_HOST: gaparasystem-postgres
      DB_PORT: 5432
      DB_NAME: garapasys_db
      DB_USER: garapasys_user
      DB_PASSWORD: garapasys_password
      DATABASE_URL: "postgresql://garapasys_user:garapasys_password@gaparasystem-postgres:5432/garapasys_db?schema=public"
      NEXTAUTH_SECRET: "KmYl85qqhLFfe0VMH+k+bAelK+r1fWcGem+F+beJj+M="
      NEXTAUTH_URL: "http://localhost:3000"
      NODE_ENV: "production"
    ports:
      - "3000:3000"
    depends_on:
      gaparasystem-postgres:
        condition: service_healthy
    networks:
      - gaparasystem-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: gaparasystem-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gaparasystem-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  gaparasystem-network:
    driver: bridge