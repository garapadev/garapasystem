# Docker Compose para Infraestrutura de Telemetria Centralizada
# Para ser implantado em app.garapasystem.com

version: '3.8'

services:
  # Coletor OpenTelemetry Centralizado
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: garapasystem-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
      - ./logs:/var/log/otel
      - ./htpasswd:/etc/otel/htpasswd:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus metrics
      - "13133:13133" # Health check
      - "1777:1777"   # pprof
      - "55679:55679" # zpages
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - FEDERATION_KEY=${FEDERATION_KEY}
    networks:
      - telemetry
    depends_on:
      - jaeger
      - prometheus
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jaeger para traces
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: garapasystem-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_USERNAME=${ELASTICSEARCH_USERNAME}
      - ES_PASSWORD=${ELASTICSEARCH_PASSWORD}
    networks:
      - telemetry
    depends_on:
      - elasticsearch

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: garapasystem-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus-rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - telemetry

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: garapasystem-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - telemetry
    depends_on:
      - prometheus

  # Elasticsearch para armazenamento
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: garapasystem-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - telemetry
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTICSEARCH_PASSWORD} -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana para análise de logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: garapasystem-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    networks:
      - telemetry
    depends_on:
      - elasticsearch

  # Load Balancer para alta disponibilidade
  nginx:
    image: nginx:alpine
    container_name: garapasystem-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
    networks:
      - telemetry
    depends_on:
      - otel-collector

  # Redis para cache e rate limiting
  redis:
    image: redis:alpine
    container_name: garapasystem-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - telemetry

  # Alertmanager para alertas
  alertmanager:
    image: prom/alertmanager:latest
    container_name: garapasystem-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    networks:
      - telemetry

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  redis-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  telemetry:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16