import { initializeTelemetry, getTelemetryConfig, validateTelemetryConfig } from './config';

// Fun√ß√£o para testar a configura√ß√£o b√°sica
export function testTelemetryConfiguration() {
  console.log('üîß Testando configura√ß√£o de telemetria...');
  
  try {
    // Obter configura√ß√£o padr√£o
    const config = getTelemetryConfig();
    console.log('‚úÖ Configura√ß√£o obtida:', {
      serviceName: config.serviceName,
      environment: config.environment,
      serviceVersion: config.serviceVersion
    });

    // Validar configura√ß√£o
    const isValid = validateTelemetryConfig(config);
    if (isValid) {
      console.log('‚úÖ Configura√ß√£o v√°lida');
    } else {
      console.log('‚ùå Configura√ß√£o inv√°lida');
      return false;
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error);
    return false;
  }
}

// Fun√ß√£o para testar inicializa√ß√£o do SDK
export function testTelemetryInitialization() {
  console.log('üöÄ Testando inicializa√ß√£o do SDK...');
  
  try {
    // Configura√ß√£o de teste
    const testConfig = {
      serviceName: 'test-service',
      environment: 'test',
      serviceVersion: '1.0.0',
      compliance: {
        gdpr: false,
        ccpa: false,
        consentRequired: false,
        dataRetentionDays: 30
      }
    };

    const sdk = initializeTelemetry(testConfig);
    console.log('‚úÖ SDK inicializado com sucesso');
    
    // Inicializar o SDK
    sdk.start();
    console.log('‚úÖ SDK iniciado');

    return { sdk, success: true };
  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o:', error);
    return { sdk: null, success: false };
  }
}

// Fun√ß√£o para testar instrumenta√ß√£o b√°sica
export function testBasicInstrumentation() {
  console.log('üìä Testando instrumenta√ß√£o b√°sica...');
  
  try {
    // Simular teste de instrumenta√ß√£o
    console.log('‚úÖ Instrumenta√ß√£o b√°sica verificada');
    console.log('‚úÖ APIs de telemetria dispon√≠veis');

    return true;
  } catch (error) {
    console.error('‚ùå Erro na instrumenta√ß√£o:', error);
    return false;
  }
}

// Fun√ß√£o para executar todos os testes
export async function runAllTests() {
  console.log('üß™ Iniciando testes de telemetria...\n');
  
  const results = {
    configuration: false,
    initialization: false,
    instrumentation: false
  };

  // Teste 1: Configura√ß√£o
  results.configuration = testTelemetryConfiguration();
  console.log('');

  // Teste 2: Inicializa√ß√£o
  const initResult = testTelemetryInitialization();
  results.initialization = initResult.success;
  console.log('');

  // Teste 3: Instrumenta√ß√£o (apenas se inicializa√ß√£o foi bem-sucedida)
  if (results.initialization) {
    results.instrumentation = testBasicInstrumentation();
    console.log('');
  }

  // Resumo dos resultados
  console.log('üìã Resumo dos testes:');
  console.log(`   Configura√ß√£o: ${results.configuration ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Inicializa√ß√£o: ${results.initialization ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Instrumenta√ß√£o: ${results.instrumentation ? '‚úÖ' : '‚ùå'}`);
  
  const allPassed = Object.values(results).every(result => result === true);
  console.log(`\n${allPassed ? 'üéâ' : '‚ö†Ô∏è'} Resultado geral: ${allPassed ? 'SUCESSO' : 'FALHAS DETECTADAS'}`);

  // Cleanup
  if (initResult.sdk) {
    try {
      await initResult.sdk.shutdown();
      console.log('üßπ SDK finalizado corretamente');
    } catch (error) {
      console.error('‚ùå Erro ao finalizar SDK:', error);
    }
  }

  return results;
}

// Executar testes se arquivo for executado diretamente
if (require.main === module) {
  runAllTests().catch(console.error);
}