const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');

const prisma = new PrismaClient();

async function testSyncStatus() {
  try {
    console.log('üîç Testando status da sincroniza√ß√£o...');
    
    // 1. Verificar configura√ß√µes no banco
    const emailConfig = await prisma.emailConfig.findFirst({
      where: {
        ativo: true,
        syncEnabled: true
      },
      include: {
        colaborador: {
          include: {
            usuarios: true
          }
        }
      }
    });
    
    if (!emailConfig) {
      console.log('‚ùå Nenhuma configura√ß√£o ativa encontrada');
      return;
    }
    
    console.log('üìß Configura√ß√£o encontrada:');
    console.log('- ID:', emailConfig.id);
    console.log('- Email:', emailConfig.email);
    console.log('- Ativo:', emailConfig.ativo);
    console.log('- Sync Enabled:', emailConfig.syncEnabled);
    console.log('- Colaborador ID:', emailConfig.colaboradorId);
    console.log('- Usu√°rios:', emailConfig.colaborador.usuarios.map(u => u.email));
    
    // 2. Testar endpoint local (se o servidor estiver rodando)
    try {
      console.log('\nüåê Testando endpoint /api/email-sync/auto...');
      
      // Simular uma requisi√ß√£o sem autentica√ß√£o para ver o erro
      const response = await fetch('http://localhost:3000/api/email-sync/auto', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const data = await response.json();
      console.log('Status:', response.status);
      console.log('Resposta:', JSON.stringify(data, null, 2));
      
    } catch (fetchError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel testar o endpoint (servidor pode n√£o estar rodando):', fetchError.message);
    }
    
    // 3. Verificar se h√° jobs ativos no scheduler (simula√ß√£o)
    console.log('\nüìä Informa√ß√µes da configura√ß√£o:');
    console.log('- syncInterval:', emailConfig.syncInterval || 180);
    console.log('- lastSync:', emailConfig.lastSync);
    
    // 4. Verificar se o campo syncEnabled est√° correto
    if (!emailConfig.syncEnabled) {
      console.log('\n‚ö†Ô∏è  PROBLEMA ENCONTRADO: syncEnabled est√° como false!');
      console.log('Atualizando para true...');
      
      await prisma.emailConfig.update({
        where: { id: emailConfig.id },
        data: { syncEnabled: true }
      });
      
      console.log('‚úÖ syncEnabled atualizado para true');
    } else {
      console.log('\n‚úÖ syncEnabled est√° correto (true)');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSyncStatus();