generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  senha                  String
  nome                   String
  ativo                  Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  colaboradorId          String?                 @unique
  historicoOportunidades HistoricoOportunidade[]
  colaborador            Colaborador?            @relation(fields: [colaboradorId], references: [id])

  @@map("usuarios")
}

model Empresa {
  id                 String   @id @default(cuid())
  razaoSocial        String
  nomeFantasia       String?
  cnpj               String?  @unique
  inscricaoEstadual  String?
  inscricaoMunicipal String?
  email              String?
  telefone           String?
  celular            String?
  website            String?
  cep                String?
  logradouro         String?
  numero             String?
  complemento        String?
  bairro             String?
  cidade             String?
  estado             String?
  pais               String?  @default("Brasil")
  banco              String?
  agencia            String?
  conta              String?
  tipoConta          String?
  pix                String?
  logo               String?
  cor_primaria       String?
  cor_secundaria     String?
  observacoes        String?
  ativo              Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("empresa")
}

model Endereco {
  id                    String       @id @default(cuid())
  cep                   String?
  logradouro            String?
  numero                String?
  complemento           String?
  bairro                String?
  cidade                String?
  estado                String?
  pais                  String?      @default("Brasil")
  tipo                  TipoEndereco @default(RESIDENCIAL)
  informacoesAdicionais String?
  principal             Boolean      @default(false)
  ativo                 Boolean      @default(true)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  clienteId             String
  cliente               Cliente      @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@map("enderecos")
}

model Cliente {
  id                 String            @id @default(cuid())
  nome               String
  email              String?           @unique
  telefone           String?
  documento          String?
  tipo               TipoCliente       @default(PESSOA_FISICA)
  status             StatusCliente     @default(LEAD)
  observacoes        String?
  valorPotencial     Float?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  grupoHierarquicoId String?
  grupoHierarquico   GrupoHierarquico? @relation(fields: [grupoHierarquicoId], references: [id])
  enderecos          Endereco[]
  helpdeskTickets    HelpdeskTicket[]
  oportunidades      Oportunidade[]
  ordensServico      OrdemServico[]
  tasks              Task[]

  @@map("clientes")
}

model GrupoHierarquico {
  id                    String                 @id @default(cuid())
  nome                  String
  descricao             String?
  ativo                 Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  parentId              String?
  clientes              Cliente[]
  colaboradores         Colaborador[]
  parent                GrupoHierarquico?      @relation("GrupoHierarquia", fields: [parentId], references: [id])
  children              GrupoHierarquico[]     @relation("GrupoHierarquia")
  helpdeskDepartamentos HelpdeskDepartamento[]

  @@map("grupos_hierarquicos")
}

model Permissao {
  id        String            @id @default(cuid())
  nome      String            @unique
  descricao String?
  recurso   String
  acao      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  perfis    PerfilPermissao[]

  @@map("permissoes")
}

model Perfil {
  id            String            @id @default(cuid())
  nome          String            @unique
  descricao     String?
  ativo         Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  colaboradores Colaborador[]
  permissoes    PerfilPermissao[]

  @@map("perfis")
}

model PerfilPermissao {
  perfilId    String
  permissaoId String
  perfil      Perfil    @relation(fields: [perfilId], references: [id], onDelete: Cascade)
  permissao   Permissao @relation(fields: [permissaoId], references: [id], onDelete: Cascade)

  @@id([perfilId, permissaoId])
  @@map("perfil_permissao")
}

model Colaborador {
  id                            String                   @id @default(cuid())
  nome                          String
  email                         String                   @unique
  telefone                      String?
  documento                     String?
  cargo                         String?
  dataAdmissao                  DateTime?
  ativo                         Boolean                  @default(true)
  createdAt                     DateTime                 @default(now())
  updatedAt                     DateTime                 @updatedAt
  perfilId                      String?
  grupoHierarquicoId            String?
  whatsappInstanceName          String?
  whatsappToken                 String?
  anexosLaudoTecnico            AnexoLaudoTecnico[]      @relation("AnexoLaudoTecnico")
  anexosOrcamento               AnexoOrcamento[]         @relation("AnexoOrcamento")
  anexosOrdemServico            AnexoOrdemServico[]
  grupoHierarquico              GrupoHierarquico?        @relation(fields: [grupoHierarquicoId], references: [id])
  perfil                        Perfil?                  @relation(fields: [perfilId], references: [id])
  comentariosOrdemServico       ComentarioOrdemServico[]
  cotacoesAprovadorFinal        Cotacao[]                @relation("CotacaoAprovadorFinal")
  cotacoesAprovadorNivel1       Cotacao[]                @relation("CotacaoAprovadorNivel1")
  cotacoesAprovadorNivel2       Cotacao[]                @relation("CotacaoAprovadorNivel2")
  emailConfig                   EmailConfig?
  helpdeskMensagens             HelpdeskMensagem[]
  helpdeskTicketLogs            HelpdeskTicketLog[]
  helpdeskTicketsResponsavel    HelpdeskTicket[]
  historicoLaudoTecnico         HistoricoLaudoTecnico[]  @relation("HistoricoLaudoTecnico")
  historicoOrcamento            HistoricoOrcamento[]     @relation("HistoricoOrcamento")
  historicoOrdemServico         HistoricoOrdemServico[]
  laudosTecnicos                LaudoTecnico[]           @relation("LaudoTecnico")
  moduloSistemaLogs             ModuloSistemaLog[]       @relation("ModuloSistemaLog")
  movimentacoesEstoque          MovimentacaoEstoque[]    @relation("MovimentacaoEstoqueResponsavel")
  movimentacoesTombamento       MovimentacaoTombamento[] @relation("MovimentacaoTombamentoResponsavel")
  oportunidades                 Oportunidade[]
  orcamentosCriados             Orcamento[]              @relation("OrcamentoCriador")
  ordensServicoCriadas          OrdemServico[]           @relation("OrdemServicoCriador")
  ordensServicoResponsavel      OrdemServico[]           @relation("OrdemServicoResponsavel")
  solicitacoesCompraAprovador   SolicitacaoCompra[]      @relation("SolicitacaoCompraAprovador")
  solicitacoesCompraSolicitante SolicitacaoCompra[]      @relation("SolicitacaoCompraSolicitante")
  taskAttachments               TaskAttachment[]
  taskComments                  TaskComment[]
  taskLogs                      TaskLog[]
  taskNotifications             TaskNotification[]
  tasksCriadas                  Task[]                   @relation("TaskCriador")
  tasksResponsavel              Task[]
  usuarios                      Usuario?
  whatsappConversations         WhatsAppConversation[]
  whatsappMessages              WhatsAppMessage[]
  whatsappSession               WhatsAppSession?

  @@map("colaboradores")
}

model EtapaPipeline {
  id            String         @id @default(cuid())
  nome          String
  descricao     String?
  ordem         Int
  cor           String?
  ativo         Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  oportunidades Oportunidade[]

  @@map("etapas_pipeline")
}

model Oportunidade {
  id             String                  @id @default(cuid())
  titulo         String
  descricao      String?
  valor          Float?
  probabilidade  Int?
  dataFechamento DateTime?
  observacoes    String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  clienteId      String
  responsavelId  String?
  etapaId        String
  historico      HistoricoOportunidade[]
  cliente        Cliente                 @relation(fields: [clienteId], references: [id])
  etapa          EtapaPipeline           @relation(fields: [etapaId], references: [id])
  responsavel    Colaborador?            @relation(fields: [responsavelId], references: [id])
  ordensServico  OrdemServico[]
  tasks          Task[]

  @@map("oportunidades")
}

model HistoricoOportunidade {
  id             String       @id @default(cuid())
  acao           String
  valorAnterior  String?
  valorNovo      String?
  observacao     String?
  createdAt      DateTime     @default(now())
  oportunidadeId String
  usuarioId      String?
  oportunidade   Oportunidade @relation(fields: [oportunidadeId], references: [id], onDelete: Cascade)
  usuario        Usuario?     @relation(fields: [usuarioId], references: [id])

  @@map("historico_oportunidades")
}

model Configuracao {
  id        String   @id @default(cuid())
  chave     String   @unique
  valor     String
  descricao String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configuracoes")
}

model ApiKey {
  id         String    @id @default(cuid())
  nome       String
  chave      String    @unique
  ativo      Boolean   @default(true)
  ultimoUso  DateTime?
  expiresAt  DateTime?
  permissoes String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  logs       ApiLog[]

  @@map("api_keys")
}

model WebhookConfig {
  id        String       @id @default(cuid())
  nome      String
  url       String
  eventos   String
  ativo     Boolean      @default(true)
  secret    String?
  headers   String?
  timeout   Int          @default(30)
  retries   Int          @default(3)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  logs      WebhookLog[]

  @@map("webhook_configs")
}

model ApiLog {
  id           String   @id @default(cuid())
  method       String
  endpoint     String
  statusCode   Int
  responseTime Int
  userAgent    String?
  ipAddress    String?
  payload      String?
  response     String?
  createdAt    DateTime @default(now())
  apiKeyId     String?
  apiKey       ApiKey?  @relation(fields: [apiKeyId], references: [id])

  @@map("api_logs")
}

model WebhookLog {
  id              String        @id @default(cuid())
  evento          String
  payload         String
  statusCode      Int?
  responseTime    Int?
  tentativa       Int           @default(1)
  sucesso         Boolean       @default(false)
  errorMessage    String?
  createdAt       DateTime      @default(now())
  webhookConfigId String
  webhookConfig   WebhookConfig @relation(fields: [webhookConfigId], references: [id], onDelete: Cascade)

  @@map("webhook_logs")
}

model EmailConfig {
  id            String        @id @default(cuid())
  imapHost      String
  imapPort      Int           @default(993)
  imapSecure    Boolean       @default(true)
  smtpHost      String
  smtpPort      Int           @default(587)
  smtpSecure    Boolean       @default(false)
  email         String
  password      String
  syncEnabled   Boolean       @default(true)
  syncInterval  Int           @default(180)
  lastSync      DateTime?
  ativo         Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  colaboradorId String        @unique
  colaborador   Colaborador   @relation(fields: [colaboradorId], references: [id], onDelete: Cascade)
  folders       EmailFolder[]
  emails        Email[]

  @@map("email_configs")
}

model EmailFolder {
  id             String      @id @default(cuid())
  name           String
  path           String
  delimiter      String      @default("/")
  specialUse     String?
  subscribed     Boolean     @default(true)
  totalMessages  Int         @default(0)
  unreadMessages Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  emailConfigId  String
  emailConfig    EmailConfig @relation(fields: [emailConfigId], references: [id], onDelete: Cascade)
  emails         Email[]

  @@unique([emailConfigId, path])
  @@map("email_folders")
}

model Email {
  id            String            @id @default(cuid())
  messageId     String
  uid           Int
  subject       String?
  from          String
  to            String?
  cc            String?
  bcc           String?
  replyTo       String?
  textContent   String?
  htmlContent   String?
  date          DateTime
  size          Int?
  flags         String?
  isRead        Boolean           @default(false)
  isFlagged     Boolean           @default(false)
  isDeleted     Boolean           @default(false)
  inReplyTo     String?
  references    String?
  threadId      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  emailConfigId String
  folderId      String
  attachments   EmailAttachment[]
  emailConfig   EmailConfig       @relation(fields: [emailConfigId], references: [id], onDelete: Cascade)
  folder        EmailFolder       @relation(fields: [folderId], references: [id], onDelete: Cascade)
  tasks         Task[]

  @@unique([emailConfigId, messageId])
  @@unique([emailConfigId, folderId, uid])
  @@map("emails")
}

model EmailAttachment {
  id          String   @id @default(cuid())
  filename    String
  contentType String
  size        Int
  contentId   String?
  disposition String?
  filePath    String?
  createdAt   DateTime @default(now())
  emailId     String
  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@map("email_attachments")
}

model HelpdeskDepartamento {
  id                 String            @id @default(cuid())
  nome               String
  descricao          String?
  ativo              Boolean           @default(true)
  imapHost           String?
  imapPort           Int?              @default(993)
  imapSecure         Boolean           @default(true)
  imapEmail          String?
  imapPassword       String?
  smtpHost           String?
  smtpPort           Int?              @default(587)
  smtpSecure         Boolean           @default(false)
  smtpEmail          String?
  smtpPassword       String?
  syncEnabled        Boolean           @default(true)
  syncInterval       Int               @default(300)
  lastSync           DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  grupoHierarquicoId String?
  grupoHierarquico   GrupoHierarquico? @relation(fields: [grupoHierarquicoId], references: [id])
  tickets            HelpdeskTicket[]

  @@map("helpdesk_departamentos")
}

model HelpdeskTicket {
  id                  String               @id @default(cuid())
  numero              Int                  @unique
  assunto             String
  descricao           String?
  prioridade          HelpdeskPrioridade   @default(MEDIA)
  status              HelpdeskStatus       @default(ABERTO)
  solicitanteNome     String
  solicitanteEmail    String
  solicitanteTelefone String?
  emailMessageId      String?
  emailUid            Int?
  dataAbertura        DateTime             @default(now())
  dataFechamento      DateTime?
  dataUltimaResposta  DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  departamentoId      String
  clienteId           String?
  responsavelId       String?
  mensagens           HelpdeskMensagem[]
  logs                HelpdeskTicketLog[]
  cliente             Cliente?             @relation(fields: [clienteId], references: [id])
  departamento        HelpdeskDepartamento @relation(fields: [departamentoId], references: [id])
  responsavel         Colaborador?         @relation(fields: [responsavelId], references: [id])
  tasks               Task[]

  @@map("helpdesk_tickets")
}

model HelpdeskMensagem {
  id             String               @id @default(cuid())
  conteudo       String
  tipoConteudo   HelpdeskTipoConteudo @default(TEXTO)
  remetenteNome  String
  remetenteEmail String
  isInterno      Boolean              @default(false)
  emailMessageId String?
  emailUid       Int?
  createdAt      DateTime             @default(now())
  ticketId       String
  autorId        String?
  anexos         HelpdeskAnexo[]
  autor          Colaborador?         @relation(fields: [autorId], references: [id])
  ticket         HelpdeskTicket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("helpdesk_mensagens")
}

model HelpdeskAnexo {
  id             String           @id @default(cuid())
  nomeArquivo    String
  tipoConteudo   String
  tamanho        Int
  caminhoArquivo String
  createdAt      DateTime         @default(now())
  mensagemId     String
  mensagem       HelpdeskMensagem @relation(fields: [mensagemId], references: [id], onDelete: Cascade)

  @@map("helpdesk_anexos")
}

model HelpdeskTicketLog {
  id            String          @id @default(cuid())
  tipo          HelpdeskLogTipo
  descricao     String
  valorAnterior String?
  valorNovo     String?
  autorNome     String
  autorEmail    String
  autorId       String?
  createdAt     DateTime        @default(now())
  ticketId      String
  autor         Colaborador?    @relation(fields: [autorId], references: [id])
  ticket        HelpdeskTicket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("helpdesk_ticket_logs")
}

model Task {
  id               String             @id @default(cuid())
  titulo           String
  descricao        String?
  prioridade       TaskPrioridade     @default(MEDIA)
  status           TaskStatus         @default(PENDENTE)
  dataVencimento   DateTime
  dataInicio       DateTime?
  dataConclusao    DateTime?
  isRecorrente     Boolean            @default(false)
  tempoEstimado    Int?
  tempoGasto       Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  responsavelId    String
  criadoPorId      String
  clienteId        String?
  oportunidadeId   String?
  emailId          String?
  helpdeskTicketId String?
  recorrenciaId    String?
  ordemServicoId   String?
  anexos           TaskAttachment[]
  comentarios      TaskComment[]
  logs             TaskLog[]
  notificacoes     TaskNotification[]
  cliente          Cliente?           @relation(fields: [clienteId], references: [id])
  criadoPor        Colaborador        @relation("TaskCriador", fields: [criadoPorId], references: [id])
  email            Email?             @relation(fields: [emailId], references: [id])
  helpdeskTicket   HelpdeskTicket?    @relation(fields: [helpdeskTicketId], references: [id])
  oportunidade     Oportunidade?      @relation(fields: [oportunidadeId], references: [id])
  ordemServico     OrdemServico?      @relation(fields: [ordemServicoId], references: [id])
  recorrencia      TaskRecurrence?    @relation(fields: [recorrenciaId], references: [id])
  responsavel      Colaborador        @relation(fields: [responsavelId], references: [id])

  @@map("tasks")
}

model TaskComment {
  id        String      @id @default(cuid())
  conteudo  String
  isInterno Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  taskId    String
  autorId   String
  autor     Colaborador @relation(fields: [autorId], references: [id])
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model TaskAttachment {
  id             String      @id @default(cuid())
  nomeArquivo    String
  tipoConteudo   String
  tamanho        Int
  caminhoArquivo String
  createdAt      DateTime    @default(now())
  taskId         String
  uploadPorId    String
  task           Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadPor      Colaborador @relation(fields: [uploadPorId], references: [id])

  @@map("task_attachments")
}

model TaskRecurrence {
  id              String             @id @default(cuid())
  tipo            TaskRecurrenceType
  intervalo       Int                @default(1)
  diasSemana      String?
  diaMes          Int?
  dataFim         DateTime?
  maxOcorrencias  Int?
  ativo           Boolean            @default(true)
  proximaExecucao DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  tasks           Task[]

  @@map("task_recurrences")
}

model TaskLog {
  id            String      @id @default(cuid())
  tipo          TaskLogType
  descricao     String
  valorAnterior String?
  valorNovo     String?
  createdAt     DateTime    @default(now())
  taskId        String
  autorId       String
  autor         Colaborador @relation(fields: [autorId], references: [id])
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_logs")
}

model TaskNotification {
  id             String               @id @default(cuid())
  tipo           TaskNotificationType
  titulo         String
  mensagem       String
  enviado        Boolean              @default(false)
  dataEnvio      DateTime?
  tentativas     Int                  @default(0)
  agendadoPara   DateTime
  createdAt      DateTime             @default(now())
  taskId         String
  destinatarioId String
  destinatario   Colaborador          @relation(fields: [destinatarioId], references: [id])
  task           Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_notifications")
}

model WhatsAppConnection {
  id          String            @id @default(cuid())
  sessionId   String            @unique
  phoneNumber String?
  isConnected Boolean           @default(false)
  qrCode      String?
  lastSeen    DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  contacts    WhatsAppContact[]
  groups      WhatsAppGroup[]
  messages    WhatsAppMessage[]

  @@map("whatsapp_connections")
}

model WhatsAppConversation {
  id            String            @id @default(cuid())
  colaboradorId String
  chatId        String
  nome          String
  telefone      String
  avatar        String?
  tipo          WhatsAppChatType  @default(INDIVIDUAL)
  lastMessageAt DateTime          @default(now())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  colaborador   Colaborador       @relation(fields: [colaboradorId], references: [id], onDelete: Cascade)
  messages      WhatsAppMessage[]

  @@unique([colaboradorId, chatId])
  @@map("whatsapp_conversations")
}

model WhatsAppMessage {
  id            String                @id @default(cuid())
  messageId     String?               @unique
  connectionId  String?
  conversaId    String
  colaboradorId String
  from          String
  to            String
  body          String
  messageType   WhatsAppMessageType   @default(TEXT)
  mediaUrl      String?
  mediaType     String?
  timestamp     DateTime              @default(now())
  isFromMe      Boolean               @default(false)
  status        WhatsAppMessageStatus @default(SENT)
  createdAt     DateTime              @default(now())
  colaborador   Colaborador           @relation(fields: [colaboradorId], references: [id], onDelete: Cascade)
  connection    WhatsAppConnection?   @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  conversa      WhatsAppConversation  @relation(fields: [conversaId], references: [id], onDelete: Cascade)

  @@map("whatsapp_messages")
}

model WhatsAppContact {
  id           String             @id @default(cuid())
  connectionId String
  contactId    String
  name         String?
  phoneNumber  String
  profilePic   String?
  isBlocked    Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  connection   WhatsAppConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@unique([connectionId, contactId])
  @@map("whatsapp_contacts")
}

model WhatsAppGroup {
  id           String             @id @default(cuid())
  connectionId String
  groupId      String
  name         String
  description  String?
  profilePic   String?
  isAdmin      Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  connection   WhatsAppConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@unique([connectionId, groupId])
  @@map("whatsapp_groups")
}

model WhatsAppSession {
  id            String      @id @default(cuid())
  colaboradorId String      @unique
  status        String      @default("not_connected")
  qrCode        String?
  phoneNumber   String?
  sessionData   Json?
  lastActivity  DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  colaborador   Colaborador @relation(fields: [colaboradorId], references: [id], onDelete: Cascade)

  @@map("whatsapp_sessions")
}

model WhatsAppAutomation {
  id          String              @id @default(cuid())
  name        String
  description String?
  isActive    Boolean             @default(true)
  trigger     WhatsAppTriggerType
  conditions  Json
  actions     Json
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("whatsapp_automations")
}

model OrdemServico {
  id                 String                   @id @default(cuid())
  numero             String                   @unique
  titulo             String
  descricao          String
  observacoes        String?
  localExecucao      String?
  dataInicio         DateTime?
  dataFim            DateTime?
  prazoEstimado      DateTime?
  valorOrcamento     Float?
  valorFinal         Float?
  status             StatusOrdemServico       @default(RASCUNHO)
  prioridade         PrioridadeOS             @default(MEDIA)
  codigoAprovacao    String?                  @unique
  dataAprovacao      DateTime?
  aprovadoPor        String?
  comentariosCliente String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  clienteId          String
  responsavelId      String?
  criadoPorId        String
  oportunidadeId     String?
  anexos             AnexoOrdemServico[]
  aprovacoes         AprovacaoOrdemServico[]
  checklists         ChecklistOrdemServico[]
  comentarios        ComentarioOrdemServico[]
  historico          HistoricoOrdemServico[]
  itens              ItemOrdemServico[]
  laudoTecnico       LaudoTecnico?
  orcamentos         Orcamento[]
  cliente            Cliente                  @relation(fields: [clienteId], references: [id])
  criadoPor          Colaborador              @relation("OrdemServicoCriador", fields: [criadoPorId], references: [id])
  oportunidade       Oportunidade?            @relation(fields: [oportunidadeId], references: [id])
  responsavel        Colaborador?             @relation("OrdemServicoResponsavel", fields: [responsavelId], references: [id])
  tasks              Task[]

  @@map("ordens_servico")
}

model AprovacaoOrdemServico {
  id                 String          @id @default(cuid())
  codigo             String          @unique
  status             StatusAprovacao @default(PENDENTE)
  aprovadoPor        String?
  dataAprovacao      DateTime?
  comentariosCliente String?
  observacoes        String?
  dataExpiracao      DateTime
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  ordemServicoId     String
  ordemServico       OrdemServico    @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)

  @@map("aprovacoes_ordem_servico")
}

model ItemOrdemServico {
  id             String       @id @default(cuid())
  descricao      String
  quantidade     Float        @default(1)
  unidade        String?
  valorUnitario  Float?
  valorTotal     Float?
  observacoes    String?
  ordemServicoId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  ordemServico   OrdemServico @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)

  @@map("itens_ordem_servico")
}

model TemplateChecklist {
  id         String                  @id @default(cuid())
  nome       String
  descricao  String?
  categoria  String?
  ativo      Boolean                 @default(true)
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  checklists ChecklistOrdemServico[]
  itens      ItemTemplateChecklist[]

  @@map("templates_checklist")
}

model ItemTemplateChecklist {
  id          String            @id @default(cuid())
  descricao   String
  obrigatorio Boolean           @default(false)
  ordem       Int
  templateId  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  template    TemplateChecklist @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("itens_template_checklist")
}

model ChecklistOrdemServico {
  id             String             @id @default(cuid())
  nome           String
  ordemServicoId String
  templateId     String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  ordemServico   OrdemServico       @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)
  template       TemplateChecklist? @relation(fields: [templateId], references: [id])
  itens          ItemChecklistOS[]

  @@map("checklists_ordem_servico")
}

model ItemChecklistOS {
  id            String                @id @default(cuid())
  descricao     String
  concluido     Boolean               @default(false)
  obrigatorio   Boolean               @default(false)
  ordem         Int
  observacoes   String?
  concluidoPor  String?
  dataConclucao DateTime?
  checklistId   String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  checklist     ChecklistOrdemServico @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("itens_checklist_os")
}

model HistoricoOrdemServico {
  id             String       @id @default(cuid())
  acao           String
  descricao      String
  valorAnterior  String?
  valorNovo      String?
  ordemServicoId String
  usuarioId      String?
  usuario        String?
  colaboradorId  String?
  createdAt      DateTime     @default(now())
  colaborador    Colaborador? @relation(fields: [colaboradorId], references: [id])
  ordemServico   OrdemServico @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)

  @@map("historico_ordem_servico")
}

model ComentarioOrdemServico {
  id             String       @id @default(cuid())
  comentario     String
  interno        Boolean      @default(true)
  ordemServicoId String
  autorId        String?
  autor          String
  autorEmail     String?
  colaboradorId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  colaborador    Colaborador? @relation(fields: [colaboradorId], references: [id])
  ordemServico   OrdemServico @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)

  @@map("comentarios_ordem_servico")
}

model AnexoOrdemServico {
  id             String       @id @default(cuid())
  nomeArquivo    String
  caminhoArquivo String
  tamanho        Int?
  tipoMime       String?
  descricao      String?
  ordemServicoId String
  uploadPor      String?
  colaboradorId  String?
  createdAt      DateTime     @default(now())
  colaborador    Colaborador? @relation(fields: [colaboradorId], references: [id])
  ordemServico   OrdemServico @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)

  @@map("anexos_ordem_servico")
}

model LaudoTecnico {
  id                  String                  @id @default(cuid())
  numero              String                  @unique
  titulo              String
  problemaRelatado    String
  analiseProblema     String
  diagnostico         String
  solucaoRecomendada  String
  observacoesTecnicas String?
  gerarOrcamento      Boolean                 @default(false)
  valorOrcamento      Float?
  justificativaValor  String?
  status              StatusLaudo             @default(RASCUNHO)
  aprovadoCliente     Boolean?
  dataAprovacao       DateTime?
  comentariosCliente  String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  ordemServicoId      String                  @unique
  tecnicoId           String
  anexos              AnexoLaudoTecnico[]
  historico           HistoricoLaudoTecnico[]
  itens               ItemLaudoTecnico[]
  ordemServico        OrdemServico            @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)
  tecnico             Colaborador             @relation("LaudoTecnico", fields: [tecnicoId], references: [id])
  orcamentos          Orcamento[]

  @@map("laudos_tecnicos")
}

model ItemLaudoTecnico {
  id             String          @id @default(cuid())
  tipo           TipoItemLaudo
  descricao      String
  quantidade     Float           @default(1)
  unidade        String?
  valorUnitario  Float?
  valorTotal     Float?
  necessario     Boolean         @default(true)
  observacoes    String?
  laudoId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  laudo          LaudoTecnico    @relation(fields: [laudoId], references: [id], onDelete: Cascade)
  itensOrcamento ItemOrcamento[]

  @@map("itens_laudo_tecnico")
}

model AnexoLaudoTecnico {
  id             String               @id @default(cuid())
  nomeArquivo    String
  caminhoArquivo String
  tamanho        Int?
  tipoMime       String?
  descricao      String?
  categoria      CategoriaAnexoLaudo?
  laudoId        String
  uploadPor      String?
  tecnicoId      String?
  createdAt      DateTime             @default(now())
  laudo          LaudoTecnico         @relation(fields: [laudoId], references: [id], onDelete: Cascade)
  tecnico        Colaborador?         @relation("AnexoLaudoTecnico", fields: [tecnicoId], references: [id])

  @@map("anexos_laudo_tecnico")
}

model HistoricoLaudoTecnico {
  id            String       @id @default(cuid())
  acao          String
  descricao     String
  valorAnterior String?
  valorNovo     String?
  laudoId       String
  tecnicoId     String?
  createdAt     DateTime     @default(now())
  laudo         LaudoTecnico @relation(fields: [laudoId], references: [id], onDelete: Cascade)
  tecnico       Colaborador? @relation("HistoricoLaudoTecnico", fields: [tecnicoId], references: [id])

  @@map("historico_laudo_tecnico")
}

model Orcamento {
  id                    String               @id @default(cuid())
  numero                String               @unique
  titulo                String
  descricao             String?
  observacoes           String?
  valorSubtotal         Float                @default(0)
  valorDesconto         Float                @default(0)
  percentualDesconto    Float?
  valorTotal            Float                @default(0)
  dataValidade          DateTime
  status                StatusOrcamento      @default(RASCUNHO)
  aprovadoCliente       Boolean?
  dataAprovacao         DateTime?
  comentariosCliente    String?
  codigoAprovacao       String?              @unique
  geradoAutomaticamente Boolean              @default(false)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  ordemServicoId        String
  laudoTecnicoId        String?
  criadoPorId           String
  anexos                AnexoOrcamento[]
  historico             HistoricoOrcamento[]
  itens                 ItemOrcamento[]
  criadoPor             Colaborador          @relation("OrcamentoCriador", fields: [criadoPorId], references: [id])
  laudoTecnico          LaudoTecnico?        @relation(fields: [laudoTecnicoId], references: [id])
  ordemServico          OrdemServico         @relation(fields: [ordemServicoId], references: [id], onDelete: Cascade)

  @@map("orcamentos")
}

model ItemOrcamento {
  id            String            @id @default(cuid())
  tipo          TipoItemOrcamento
  descricao     String
  quantidade    Float             @default(1)
  unidade       String?
  valorUnitario Float
  valorTotal    Float
  observacoes   String?
  orcamentoId   String
  itemLaudoId   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  itemLaudo     ItemLaudoTecnico? @relation(fields: [itemLaudoId], references: [id])
  orcamento     Orcamento         @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)

  @@map("itens_orcamento")
}

model AnexoOrcamento {
  id             String       @id @default(cuid())
  nomeArquivo    String
  caminhoArquivo String
  tamanho        Int?
  tipoMime       String?
  descricao      String?
  orcamentoId    String
  uploadPor      String?
  colaboradorId  String?
  createdAt      DateTime     @default(now())
  colaborador    Colaborador? @relation("AnexoOrcamento", fields: [colaboradorId], references: [id])
  orcamento      Orcamento    @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)

  @@map("anexos_orcamento")
}

model HistoricoOrcamento {
  id            String       @id @default(cuid())
  acao          String
  descricao     String
  valorAnterior String?
  valorNovo     String?
  orcamentoId   String
  colaboradorId String?
  createdAt     DateTime     @default(now())
  colaborador   Colaborador? @relation("HistoricoOrcamento", fields: [colaboradorId], references: [id])
  orcamento     Orcamento    @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)

  @@map("historico_orcamento")
}

model ModuloSistema {
  id        String             @id @default(cuid())
  nome      String             @unique
  titulo    String
  descricao String?
  ativo     Boolean            @default(true)
  core      Boolean            @default(false)
  icone     String?
  ordem     Int                @default(0)
  permissao String?
  rota      String?
  categoria String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  logs      ModuloSistemaLog[]

  @@map("modulos_sistema")
}

model ModuloSistemaLog {
  id            String        @id @default(cuid())
  moduloId      String
  acao          String
  valorAnterior String?
  valorNovo     String?
  observacoes   String?
  autorId       String?
  autorNome     String
  autorEmail    String
  createdAt     DateTime      @default(now())
  autor         Colaborador?  @relation("ModuloSistemaLog", fields: [autorId], references: [id])
  modulo        ModuloSistema @relation(fields: [moduloId], references: [id], onDelete: Cascade)

  @@map("modulos_sistema_logs")
}

model CentroCusto {
  id                   String                @id @default(cuid())
  codigo               String                @unique
  nome                 String
  descricao            String?
  ativo                Boolean               @default(true)
  parentId             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  parent               CentroCusto?          @relation("CentroCustoHierarquia", fields: [parentId], references: [id])
  children             CentroCusto[]         @relation("CentroCustoHierarquia")
  itensTombamento      ItemTombamento[]
  movimentacoesEstoque MovimentacaoEstoque[]
  solicitacoesCompra   SolicitacaoCompra[]

  @@map("centros_custo")
}

model Fornecedor {
  id                String         @id @default(cuid())
  razaoSocial       String
  nomeFantasia      String?
  cnpj              String?        @unique
  cpf               String?        @unique
  inscricaoEstadual String?
  email             String?
  telefone          String?
  celular           String?
  website           String?
  cep               String?
  logradouro        String?
  numero            String?
  complemento       String?
  bairro            String?
  cidade            String?
  estado            String?
  pais              String?        @default("Brasil")
  banco             String?
  agencia           String?
  conta             String?
  tipoConta         String?
  pix               String?
  qualificado       Boolean        @default(false)
  observacoes       String?
  ativo             Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  cotacoes          Cotacao[]
  pedidosCompra     PedidoCompra[]

  @@map("fornecedores")
}

model CategoriaProduto {
  id        String             @id @default(cuid())
  nome      String
  descricao String?
  ativo     Boolean            @default(true)
  parentId  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  parent    CategoriaProduto?  @relation("CategoriaProdutoHierarquia", fields: [parentId], references: [id])
  children  CategoriaProduto[] @relation("CategoriaProdutoHierarquia")
  produtos  Produto[]

  @@map("categorias_produto")
}

model Produto {
  id               String                  @id @default(cuid())
  codigo           String                  @unique
  nome             String
  descricao        String?
  unidadeMedida    String
  categoriaId      String
  estoqueMinimo    Decimal?                @default(0)
  estoqueMaximo    Decimal?
  pontoReposicao   Decimal?                @default(0)
  precoUnitario    Decimal?                @default(0)
  precoMedio       Decimal?                @default(0)
  ultimoPreco      Decimal?                @default(0)
  controlEstoque   Boolean                 @default(true)
  ativo            Boolean                 @default(true)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  estoques         EstoqueProduto[]
  itensCotacao     ItemCotacao[]
  itensPedido      ItemPedidoCompra[]
  itensSolicitacao ItemSolicitacaoCompra[]
  itensTombamento  ItemTombamento[]
  movimentacoes    MovimentacaoEstoque[]
  categoria        CategoriaProduto        @relation(fields: [categoriaId], references: [id])

  @@map("produtos")
}

model SolicitacaoCompra {
  id              String                  @id @default(cuid())
  numero          String                  @unique
  descricao       String?
  justificativa   String?
  status          StatusSolicitacaoCompra @default(RASCUNHO)
  prioridade      String?                 @default("NORMAL")
  dataSolicitacao DateTime                @default(now())
  dataNecessidade DateTime?
  dataAprovacao   DateTime?
  centroCustoId   String
  solicitanteId   String
  aprovadorId     String?
  valorTotal      Decimal                 @default(0)
  observacoes     String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  cotacoes        Cotacao[]
  itens           ItemSolicitacaoCompra[]
  aprovador       Colaborador?            @relation("SolicitacaoCompraAprovador", fields: [aprovadorId], references: [id])
  centroCusto     CentroCusto             @relation(fields: [centroCustoId], references: [id])
  solicitante     Colaborador             @relation("SolicitacaoCompraSolicitante", fields: [solicitanteId], references: [id])

  @@map("solicitacoes_compra")
}

model ItemSolicitacaoCompra {
  id            String            @id @default(cuid())
  quantidade    Decimal
  valorUnitario Decimal?          @default(0)
  valorTotal    Decimal?          @default(0)
  observacoes   String?
  solicitacaoId String
  produtoId     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  itensCotacao  ItemCotacao[]
  produto       Produto           @relation(fields: [produtoId], references: [id])
  solicitacao   SolicitacaoCompra @relation(fields: [solicitacaoId], references: [id], onDelete: Cascade)

  @@map("itens_solicitacao_compra")
}

model Cotacao {
  id                 String            @id @default(cuid())
  numero             String            @unique
  status             StatusCotacao     @default(PENDENTE)
  dataCotacao        DateTime          @default(now())
  dataValidade       DateTime?
  dataAprovacao      DateTime?
  solicitacaoId      String
  fornecedorId       String
  aprovadorNivel1Id  String?
  aprovadorNivel2Id  String?
  aprovadorFinalId   String?
  valorTotal         Decimal           @default(0)
  desconto           Decimal?          @default(0)
  valorFinal         Decimal           @default(0)
  prazoEntrega       String?
  condicoesPagamento String?
  observacoes        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  aprovadorFinal     Colaborador?      @relation("CotacaoAprovadorFinal", fields: [aprovadorFinalId], references: [id])
  aprovadorNivel1    Colaborador?      @relation("CotacaoAprovadorNivel1", fields: [aprovadorNivel1Id], references: [id])
  aprovadorNivel2    Colaborador?      @relation("CotacaoAprovadorNivel2", fields: [aprovadorNivel2Id], references: [id])
  fornecedor         Fornecedor        @relation(fields: [fornecedorId], references: [id])
  solicitacao        SolicitacaoCompra @relation(fields: [solicitacaoId], references: [id])
  itens              ItemCotacao[]
  pedidosCompra      PedidoCompra[]

  @@map("cotacoes")
}

model ItemCotacao {
  id                String                @id @default(cuid())
  quantidade        Decimal
  valorUnitario     Decimal
  valorTotal        Decimal
  observacoes       String?
  cotacaoId         String
  produtoId         String
  itemSolicitacaoId String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  cotacao           Cotacao               @relation(fields: [cotacaoId], references: [id], onDelete: Cascade)
  itemSolicitacao   ItemSolicitacaoCompra @relation(fields: [itemSolicitacaoId], references: [id])
  produto           Produto               @relation(fields: [produtoId], references: [id])

  @@map("itens_cotacao")
}

model PedidoCompra {
  id                  String             @id @default(cuid())
  numero              String             @unique
  status              String             @default("PENDENTE")
  dataPedido          DateTime           @default(now())
  dataEntregaPrevista DateTime?
  dataEntregaReal     DateTime?
  cotacaoId           String
  fornecedorId        String
  valorTotal          Decimal            @default(0)
  desconto            Decimal?           @default(0)
  valorFinal          Decimal            @default(0)
  prazoEntrega        String?
  condicoesPagamento  String?
  observacoes         String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  itens               ItemPedidoCompra[]
  cotacao             Cotacao            @relation(fields: [cotacaoId], references: [id])
  fornecedor          Fornecedor         @relation(fields: [fornecedorId], references: [id])

  @@map("pedidos_compra")
}

model ItemPedidoCompra {
  id                 String       @id @default(cuid())
  quantidade         Decimal
  valorUnitario      Decimal
  valorTotal         Decimal
  quantidadeRecebida Decimal?     @default(0)
  observacoes        String?
  pedidoId           String
  produtoId          String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  pedido             PedidoCompra @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  produto            Produto      @relation(fields: [produtoId], references: [id])

  @@map("itens_pedido_compra")
}

model EstoqueProduto {
  id                   String    @id @default(cuid())
  quantidade           Decimal   @default(0)
  quantidadeReservada  Decimal   @default(0)
  quantidadeDisponivel Decimal   @default(0)
  valorUnitario        Decimal?  @default(0)
  valorTotal           Decimal?  @default(0)
  localizacao          String?
  lote                 String?
  dataValidade         DateTime?
  produtoId            String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  produto              Produto   @relation(fields: [produtoId], references: [id])

  @@unique([produtoId, localizacao, lote])
  @@map("estoque_produtos")
}

model MovimentacaoEstoque {
  id                 String                  @id @default(cuid())
  tipo               TipoMovimentacaoEstoque
  quantidade         Decimal
  valorUnitario      Decimal?                @default(0)
  valorTotal         Decimal?                @default(0)
  localizacaoOrigem  String?
  localizacaoDestino String?
  lote               String?
  documentoTipo      String?
  documentoId        String?
  documentoNumero    String?
  centroCustoId      String?
  produtoId          String
  responsavelId      String
  observacoes        String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  centroCusto        CentroCusto?            @relation(fields: [centroCustoId], references: [id])
  produto            Produto                 @relation(fields: [produtoId], references: [id])
  responsavel        Colaborador             @relation("MovimentacaoEstoqueResponsavel", fields: [responsavelId], references: [id])

  @@map("movimentacoes_estoque")
}

model ItemTombamento {
  id               String                   @id @default(cuid())
  numeroTombamento String                   @unique
  descricao        String
  status           StatusItemTombamento     @default(ATIVO)
  marca            String?
  modelo           String?
  numeroSerie      String?
  anoFabricacao    Int?
  valorAquisicao   Decimal?                 @default(0)
  valorAtual       Decimal?                 @default(0)
  dataAquisicao    DateTime?
  localizacao      String?
  responsavel      String?
  centroCustoId    String?
  produtoId        String?
  observacoes      String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  centroCusto      CentroCusto?             @relation(fields: [centroCustoId], references: [id])
  produto          Produto?                 @relation(fields: [produtoId], references: [id])
  movimentacoes    MovimentacaoTombamento[]

  @@map("itens_tombamento")
}

model MovimentacaoTombamento {
  id                 String         @id @default(cuid())
  tipo               String
  localizacaoOrigem  String?
  localizacaoDestino String?
  responsavelOrigem  String?
  responsavelDestino String?
  itemTombamentoId   String
  responsavelId      String
  observacoes        String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  itemTombamento     ItemTombamento @relation(fields: [itemTombamentoId], references: [id])
  responsavel        Colaborador    @relation("MovimentacaoTombamentoResponsavel", fields: [responsavelId], references: [id])

  @@map("movimentacoes_tombamento")
}

enum TipoCliente {
  PESSOA_FISICA
  PESSOA_JURIDICA
}

enum StatusCliente {
  LEAD
  PROSPECT
  CLIENTE
  INATIVO
}

enum TipoEndereco {
  RESIDENCIAL
  COMERCIAL
  TRABALHO
  CORRESPONDENCIA
  ENTREGA
  COBRANCA
  OUTRO
}

enum EmailSyncStatus {
  IDLE
  SYNCING
  ERROR
  DISABLED
}

enum HelpdeskStatus {
  ABERTO
  EM_ANDAMENTO
  AGUARDANDO_CLIENTE
  RESOLVIDO
  FECHADO
}

enum HelpdeskPrioridade {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum HelpdeskTipoConteudo {
  TEXTO
  HTML
  MARKDOWN
}

enum HelpdeskLogTipo {
  CRIACAO
  STATUS_ALTERADO
  PRIORIDADE_ALTERADA
  RESPONSAVEL_ALTERADO
  ASSUNTO_ALTERADO
  DESCRICAO_ALTERADA
  MENSAGEM_ADICIONADA
  ANEXO_ADICIONADO
  FECHAMENTO
  REABERTURA
}

enum TaskPrioridade {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum TaskStatus {
  PENDENTE
  EM_ANDAMENTO
  AGUARDANDO
  CONCLUIDA
  CANCELADA
}

enum TaskRecurrenceType {
  DIARIA
  SEMANAL
  MENSAL
  ANUAL
}

enum TaskLogType {
  CRIACAO
  STATUS_ALTERADO
  PRIORIDADE_ALTERADA
  RESPONSAVEL_ALTERADO
  VENCIMENTO_ALTERADO
  TITULO_ALTERADO
  DESCRICAO_ALTERADA
  COMENTARIO_ADICIONADO
  ANEXO_ADICIONADO
  CONCLUSAO
  CANCELAMENTO
  REABERTURA
}

enum TaskNotificationType {
  LEMBRETE_VENCIMENTO
  TAREFA_ATRASADA
  TAREFA_ATRIBUIDA
  STATUS_ALTERADO
  COMENTARIO_ADICIONADO
  LEMBRETE_SEM_ATUALIZACAO
  ALERTA_GESTOR
}

enum WhatsAppMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  STICKER
  LOCATION
  CONTACT

  @@map("whatsapp_message_type")
}

enum WhatsAppMessageStatus {
  SENT
  DELIVERED
  READ
  RECEIVED
  FAILED

  @@map("whatsapp_message_status")
}

enum WhatsAppChatType {
  INDIVIDUAL
  GROUP

  @@map("whatsapp_chat_type")
}

enum WhatsAppTriggerType {
  MESSAGE_RECEIVED
  CONTACT_ADDED
  GROUP_JOINED
  KEYWORD_DETECTED
  SCHEDULE

  @@map("whatsapp_trigger_type")
}

enum StatusOrdemServico {
  RASCUNHO
  AGUARDANDO_APROVACAO
  APROVADA
  REJEITADA
  EM_ANDAMENTO
  PAUSADA
  CONCLUIDA
  CANCELADA
  AGUARDANDO_APROVACAO_CLIENTE
  ORCAMENTO_ENVIADO

  @@map("status_ordem_servico")
}

enum PrioridadeOS {
  BAIXA
  MEDIA
  ALTA
  URGENTE

  @@map("prioridade_os")
}

enum StatusAprovacao {
  PENDENTE
  APROVADA
  REJEITADA
  EXPIRADA

  @@map("status_aprovacao")
}

enum StatusLaudo {
  RASCUNHO
  FINALIZADO
  ENVIADO_CLIENTE
  APROVADO_CLIENTE
  REJEITADO_CLIENTE
  REVISAO
  CONCLUIDO

  @@map("status_laudo")
}

enum TipoItemLaudo {
  MATERIAL
  SERVICO
  MAO_DE_OBRA

  @@map("tipo_item_laudo")
}

enum CategoriaAnexoLaudo {
  FOTO_PROBLEMA
  FOTO_SOLUCAO
  DOCUMENTO_TECNICO
  ESQUEMA
  OUTRO

  @@map("categoria_anexo_laudo")
}

enum StatusOrcamento {
  RASCUNHO
  ENVIADO
  APROVADO
  REJEITADO
  EXPIRADO
  CANCELADO

  @@map("status_orcamento")
}

enum TipoItemOrcamento {
  MATERIAL
  SERVICO
  MAO_DE_OBRA

  @@map("tipo_item_orcamento")
}

enum CategoriaModulo {
  CORE
  COMUNICACAO
  VENDAS
  OPERACIONAL
  RELATORIOS
  INTEGRACAO

  @@map("categoria_modulo")
}

enum StatusSolicitacaoCompra {
  RASCUNHO
  PENDENTE_APROVACAO
  APROVADA
  REJEITADA
  EM_COTACAO
  COTACAO_APROVADA
  PEDIDO_ENVIADO
  ENTREGUE
  CANCELADA

  @@map("status_solicitacao_compra")
}

enum StatusCotacao {
  PENDENTE
  EM_ANALISE
  APROVADA_NIVEL1
  APROVADA_NIVEL2
  APROVADA_FINAL
  REJEITADA
  CANCELADA

  @@map("status_cotacao")
}

enum TipoMovimentacaoEstoque {
  ENTRADA
  SAIDA
  TRANSFERENCIA
  AJUSTE
  INVENTARIO

  @@map("tipo_movimentacao_estoque")
}

enum StatusItemTombamento {
  ATIVO
  INATIVO
  MANUTENCAO
  BAIXADO
  PERDIDO
  DANIFICADO

  @@map("status_item_tombamento")
}
