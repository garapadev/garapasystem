// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Entidades de Domínio - CRM/ERP

// Usuários do sistema (autenticação)
model Usuario {
  id            String   @id @default(cuid())
  email         String   @unique
  senha         String
  nome          String
  ativo         Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  colaboradorId String?  @unique
  colaborador   Colaborador? @relation(fields: [colaboradorId], references: [id])
  
  // Histórico de oportunidades
  historicoOportunidades HistoricoOportunidade[]
  
  @@map("usuarios")
}

// Endereços dos clientes
model Endereco {
  id                   String   @id @default(cuid())
  cep                  String?
  logradouro           String?  // Rua, Avenida, etc.
  numero               String?  // Número do endereço
  complemento          String?  // Apartamento, sala, etc.
  bairro               String?  // Bairro/Distrito
  cidade               String?
  estado               String?  // Estado/UF
  pais                 String?  @default("Brasil")
  tipo                 TipoEndereco @default(RESIDENCIAL)
  informacoesAdicionais String?
  principal            Boolean  @default(false)
  ativo                Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relacionamentos
  clienteId            String
  cliente              Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  
  @@map("enderecos")
}

// Clientes e Leads
model Cliente {
  id             String      @id @default(cuid())
  nome           String
  email          String?     @unique
  telefone       String?
  documento      String?     // CPF/CNPJ
  tipo           TipoCliente @default(PESSOA_FISICA)
  status         StatusCliente @default(LEAD)
  observacoes    String?
  valorPotencial Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relacionamentos
  grupoHierarquicoId String?
  grupoHierarquico   GrupoHierarquico? @relation(fields: [grupoHierarquicoId], references: [id])
  
  // Endereços
  enderecos      Endereco[]
  
  // Oportunidades
  oportunidades  Oportunidade[]
  
  // Tickets do Helpdesk
  helpdeskTickets HelpdeskTicket[]
  
  @@map("clientes")
}

// Grupos Hierárquicos (departamentos, equipes, etc.)
model GrupoHierarquico {
  id          String            @id @default(cuid())
  nome        String
  descricao   String?
  ativo       Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Hierarquia
  parentId    String?
  parent      GrupoHierarquico? @relation("GrupoHierarquia", fields: [parentId], references: [id])
  children    GrupoHierarquico[] @relation("GrupoHierarquia")
  
  // Relacionamentos
  clientes    Cliente[]
  colaboradores Colaborador[]
  helpdeskDepartamentos HelpdeskDepartamento[]
  
  @@map("grupos_hierarquicos")
}

// Permissões do sistema (RBAC)
model Permissao {
  id          String   @id @default(cuid())
  nome        String   @unique
  descricao   String?
  recurso     String   // ex: "clientes", "colaboradores"
  acao        String   // ex: "criar", "ler", "editar", "excluir"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  perfis      PerfilPermissao[]
  
  @@map("permissoes")
}

// Perfis de acesso (RBAC)
model Perfil {
  id          String   @id @default(cuid())
  nome        String   @unique
  descricao   String?
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  permissoes  PerfilPermissao[]
  colaboradores Colaborador[]
  
  @@map("perfis")
}

// Tabela associativa entre Perfil e Permissão
model PerfilPermissao {
  perfilId    String
  permissaoId String
  
  perfil      Perfil   @relation(fields: [perfilId], references: [id], onDelete: Cascade)
  permissao   Permissao @relation(fields: [permissaoId], references: [id], onDelete: Cascade)
  
  @@id([perfilId, permissaoId])
  @@map("perfil_permissao")
}

// Colaboradores/Empregados
model Colaborador {
  id             String   @id @default(cuid())
  nome           String
  email          String   @unique
  telefone       String?
  documento      String?  // CPF
  cargo          String?
  dataAdmissao   DateTime?
  ativo          Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relacionamentos
  usuarios       Usuario[]
  perfilId       String?
  perfil         Perfil?  @relation(fields: [perfilId], references: [id])
  grupoHierarquicoId String?
  grupoHierarquico   GrupoHierarquico? @relation(fields: [grupoHierarquicoId], references: [id])
  
  // Oportunidades como responsável
  oportunidades  Oportunidade[]
  
  // Configuração de email
  emailConfig    EmailConfig?
  
  // Helpdesk
  helpdeskTicketsResponsavel HelpdeskTicket[]
  helpdeskMensagens HelpdeskMensagem[]
  
  @@map("colaboradores")
}

// Pipeline de Negócios
model EtapaPipeline {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  ordem       Int      // Ordem das etapas no pipeline
  cor         String?  // Cor para visualização no kanban
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  oportunidades Oportunidade[]
  
  @@map("etapas_pipeline")
}

model Oportunidade {
  id             String   @id @default(cuid())
  titulo         String
  descricao      String?
  valor          Float?
  probabilidade  Int?     // Percentual de 0 a 100
  dataFechamento DateTime?
  observacoes    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relacionamentos
  clienteId      String
  cliente        Cliente  @relation(fields: [clienteId], references: [id])
  
  responsavelId  String?
  responsavel    Colaborador? @relation(fields: [responsavelId], references: [id])
  
  etapaId        String
  etapa          EtapaPipeline @relation(fields: [etapaId], references: [id])
  
  // Histórico
  historico      HistoricoOportunidade[]
  
  @@map("oportunidades")
}

model HistoricoOportunidade {
  id            String   @id @default(cuid())
  acao          String   // "criada", "etapa_alterada", "valor_alterado", etc.
  valorAnterior String?  // JSON com valores anteriores
  valorNovo     String?  // JSON com valores novos
  observacao    String?
  createdAt     DateTime @default(now())
  
  // Relacionamentos
  oportunidadeId String
  oportunidade   Oportunidade @relation(fields: [oportunidadeId], references: [id], onDelete: Cascade)
  
  usuarioId      String?
  usuario        Usuario? @relation(fields: [usuarioId], references: [id])
  
  @@map("historico_oportunidades")
}

// Configurações do Sistema
model Configuracao {
  id        String   @id @default(cuid())
  chave     String   @unique // ex: "sistema_nome", "projeto_titulo"
  valor     String   // Valor da configuração
  descricao String?  // Descrição da configuração
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("configuracoes")
}

// Chaves de API
model ApiKey {
  id          String   @id @default(cuid())
  nome        String   // Nome descritivo da chave
  chave       String   @unique // Chave de API gerada
  ativo       Boolean  @default(true)
  ultimoUso   DateTime?
  expiresAt   DateTime? // Data de expiração (opcional)
  permissoes  String?  // JSON com permissões específicas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  logs        ApiLog[]
  
  @@map("api_keys")
}

// Configurações de Webhook
model WebhookConfig {
  id          String   @id @default(cuid())
  nome        String   // Nome descritivo do webhook
  url         String   // URL de destino
  eventos     String   // JSON array com eventos que disparam o webhook
  ativo       Boolean  @default(true)
  secret      String?  // Secret para validação de assinatura
  headers     String?  // JSON com headers customizados
  timeout     Int      @default(30) // Timeout em segundos
  retries     Int      @default(3)  // Número de tentativas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  logs        WebhookLog[]
  
  @@map("webhook_configs")
}

// Logs de API
model ApiLog {
  id          String   @id @default(cuid())
  method      String   // GET, POST, PUT, DELETE
  endpoint    String   // Endpoint acessado
  statusCode  Int      // Código de resposta HTTP
  responseTime Int     // Tempo de resposta em ms
  userAgent   String?  // User agent da requisição
  ipAddress   String?  // IP de origem
  payload     String?  // Payload da requisição (limitado)
  response    String?  // Resposta da API (limitado)
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  apiKeyId    String?
  apiKey      ApiKey?  @relation(fields: [apiKeyId], references: [id])
  
  @@map("api_logs")
}

// Logs de Webhook
model WebhookLog {
  id            String   @id @default(cuid())
  evento        String   // Tipo de evento que disparou
  payload       String   // Payload enviado
  statusCode    Int?     // Código de resposta HTTP
  responseTime  Int?     // Tempo de resposta em ms
  tentativa     Int      @default(1) // Número da tentativa
  sucesso       Boolean  @default(false)
  errorMessage  String?  // Mensagem de erro se houver
  createdAt     DateTime @default(now())
  
  // Relacionamentos
  webhookConfigId String
  webhookConfig   WebhookConfig @relation(fields: [webhookConfigId], references: [id], onDelete: Cascade)
  
  @@map("webhook_logs")
}

// Enums
enum TipoCliente {
  PESSOA_FISICA
  PESSOA_JURIDICA
}

enum StatusCliente {
  LEAD
  PROSPECT
  CLIENTE
  INATIVO
}

enum TipoEndereco {
  RESIDENCIAL
  COMERCIAL
  TRABALHO
  CORRESPONDENCIA
  ENTREGA
  COBRANCA
  OUTRO
}

// Sistema de Email/Webmail

// Configurações de email por colaborador
model EmailConfig {
  id                String   @id @default(cuid())
  
  // Configurações IMAP (recebimento)
  imapHost          String
  imapPort          Int      @default(993)
  imapSecure        Boolean  @default(true) // SSL/TLS
  
  // Configurações SMTP (envio)
  smtpHost          String
  smtpPort          Int      @default(587)
  smtpSecure        Boolean  @default(false) // STARTTLS
  
  // Credenciais
  email             String
  password          String   // Criptografado
  
  // Configurações de sincronização
  syncEnabled       Boolean  @default(true)
  syncInterval      Int      @default(180) // segundos (3 minutos)
  lastSync          DateTime?
  
  // Metadados
  ativo             Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  colaboradorId     String   @unique
  colaborador       Colaborador @relation(fields: [colaboradorId], references: [id], onDelete: Cascade)
  
  // Pastas e emails
  folders           EmailFolder[]
  emails            Email[]
  
  @@map("email_configs")
}

// Pastas de email (INBOX, Sent, Drafts, etc.)
model EmailFolder {
  id                String   @id @default(cuid())
  name              String   // Nome da pasta
  path              String   // Caminho IMAP da pasta
  delimiter         String   @default("/")
  specialUse        String?  // \Inbox, \Sent, \Drafts, etc.
  subscribed        Boolean  @default(true)
  
  // Contadores
  totalMessages     Int      @default(0)
  unreadMessages    Int      @default(0)
  
  // Metadados
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  emailConfigId     String
  emailConfig       EmailConfig @relation(fields: [emailConfigId], references: [id], onDelete: Cascade)
  
  emails            Email[]
  
  @@unique([emailConfigId, path])
  @@map("email_folders")
}

// Emails
model Email {
  id                String   @id @default(cuid())
  
  // Identificadores únicos
  messageId         String   // Message-ID do email
  uid               Int      // UID no servidor IMAP
  
  // Cabeçalhos principais
  subject           String?
  from              String   // JSON array de remetentes
  to                String?  // JSON array de destinatários
  cc                String?  // JSON array de cópias
  bcc               String?  // JSON array de cópias ocultas
  replyTo           String?  // JSON array de reply-to
  
  // Conteúdo
  textContent       String?  // Conteúdo em texto puro
  htmlContent       String?  // Conteúdo em HTML
  
  // Metadados
  date              DateTime // Data do email
  size              Int?     // Tamanho em bytes
  flags             String?  // JSON array de flags (\Seen, \Flagged, etc.)
  isRead            Boolean  @default(false)
  isFlagged         Boolean  @default(false)
  isDeleted         Boolean  @default(false)
  
  // Threading
  inReplyTo         String?  // Message-ID do email original
  references        String?  // JSON array de Message-IDs referenciados
  threadId          String?  // ID da thread
  
  // Sincronização
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  emailConfigId     String
  emailConfig       EmailConfig @relation(fields: [emailConfigId], references: [id], onDelete: Cascade)
  
  folderId          String
  folder            EmailFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  
  attachments       EmailAttachment[]
  
  @@unique([emailConfigId, messageId])
  @@unique([emailConfigId, folderId, uid])
  @@map("emails")
}

// Anexos de email
model EmailAttachment {
  id                String   @id @default(cuid())
  filename          String
  contentType       String
  size              Int
  contentId         String?  // Para anexos inline
  disposition       String?  // attachment ou inline
  
  // Armazenamento
  filePath          String?  // Caminho no sistema de arquivos
  
  // Metadados
  createdAt         DateTime @default(now())
  
  // Relacionamentos
  emailId           String
  email             Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  
  @@map("email_attachments")
}

enum EmailSyncStatus {
  IDLE
  SYNCING
  ERROR
  DISABLED
}

// Sistema de Helpdesk

// Departamentos do Helpdesk
model HelpdeskDepartamento {
  id                String   @id @default(cuid())
  nome              String
  descricao         String?
  ativo             Boolean  @default(true)
  
  // Configurações IMAP específicas do departamento
  imapHost          String?
  imapPort          Int?     @default(993)
  imapSecure        Boolean  @default(true)
  imapEmail         String?
  imapPassword      String?  // Criptografado
  
  // Configurações SMTP específicas do departamento
  smtpHost          String?
  smtpPort          Int?     @default(587)
  smtpSecure        Boolean  @default(false)
  smtpEmail         String?
  smtpPassword      String?  // Criptografado
  
  // Configurações de sincronização
  syncEnabled       Boolean  @default(true)
  syncInterval      Int      @default(300) // segundos (5 minutos)
  lastSync          DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  grupoHierarquicoId String?
  grupoHierarquico   GrupoHierarquico? @relation(fields: [grupoHierarquicoId], references: [id])
  
  tickets           HelpdeskTicket[]
  
  @@map("helpdesk_departamentos")
}

// Tickets do Helpdesk
model HelpdeskTicket {
  id                String   @id @default(cuid())
  numero            Int      @unique // Numeração sequencial
  assunto           String
  descricao         String?
  prioridade        HelpdeskPrioridade @default(MEDIA)
  status            HelpdeskStatus @default(ABERTO)
  
  // Informações do solicitante
  solicitanteNome   String
  solicitanteEmail  String
  solicitanteTelefone String?
  
  // Dados de origem do email (se aplicável)
  emailMessageId    String?  // Message-ID do email original
  emailUid          Int?     // UID do email no servidor IMAP
  
  // Timestamps
  dataAbertura      DateTime @default(now())
  dataFechamento    DateTime?
  dataUltimaResposta DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  departamentoId    String
  departamento      HelpdeskDepartamento @relation(fields: [departamentoId], references: [id])
  
  clienteId         String?
  cliente           Cliente? @relation(fields: [clienteId], references: [id])
  
  responsavelId     String?
  responsavel       Colaborador? @relation(fields: [responsavelId], references: [id])
  
  mensagens         HelpdeskMensagem[]
  
  @@map("helpdesk_tickets")
}

// Mensagens dos tickets
model HelpdeskMensagem {
  id                String   @id @default(cuid())
  conteudo          String
  tipoConteudo      HelpdeskTipoConteudo @default(TEXTO)
  
  // Informações do remetente
  remetenteNome     String
  remetenteEmail    String
  isInterno         Boolean  @default(false) // true se for resposta interna da equipe
  
  // Dados de origem do email (se aplicável)
  emailMessageId    String?  // Message-ID do email
  emailUid          Int?     // UID do email no servidor IMAP
  
  createdAt         DateTime @default(now())
  
  // Relacionamentos
  ticketId          String
  ticket            HelpdeskTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  autorId           String?
  autor             Colaborador? @relation(fields: [autorId], references: [id])
  
  anexos            HelpdeskAnexo[]
  
  @@map("helpdesk_mensagens")
}

// Anexos das mensagens
model HelpdeskAnexo {
  id                String   @id @default(cuid())
  nomeArquivo       String
  tipoConteudo      String
  tamanho           Int
  caminhoArquivo    String   // Caminho no sistema de arquivos
  
  createdAt         DateTime @default(now())
  
  // Relacionamentos
  mensagemId        String
  mensagem          HelpdeskMensagem @relation(fields: [mensagemId], references: [id], onDelete: Cascade)
  
  @@map("helpdesk_anexos")
}

// Enums do Helpdesk
enum HelpdeskStatus {
  ABERTO
  EM_ANDAMENTO
  AGUARDANDO_CLIENTE
  RESOLVIDO
  FECHADO
}

enum HelpdeskPrioridade {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum HelpdeskTipoConteudo {
  TEXTO
  HTML
  MARKDOWN
}